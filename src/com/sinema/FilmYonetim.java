package com.sinema;

import java.awt.Color;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Muratcan Öksüm & Emir Tuncer
 */
public class FilmYonetim extends javax.swing.JFrame {

    DefaultTableModel model;
    VeritabaniIslemler islemler = new VeritabaniIslemler();

    public FilmYonetim() {
        initComponents();
        model = (DefaultTableModel) film_tablosu.getModel();
        filmGoruntule();
        salonveriAl();
        hata_mesaj1.setText("");
        koltuklar.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        film_tablosu = new javax.swing.JTable();
        film_adi = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        film_salon = new javax.swing.JComboBox<>();
        film_ekle = new javax.swing.JButton();
        film_guncelle = new javax.swing.JButton();
        film_sil = new javax.swing.JButton();
        film_tarih = new com.github.lgooddatepicker.components.DatePicker();
        film_saat = new com.github.lgooddatepicker.components.TimePicker();
        hata_mesaj = new javax.swing.JLabel();
        film_gunceller = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        koltuklar = new javax.swing.JLabel();
        hata_mesaj2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        Salon_Yonetim = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        hata_mesaj1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        exit = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconImage(new ImageIcon("./src/com/sinema/images/icon.png").getImage());
        setLocation(new java.awt.Point(500, 150));
        setMinimumSize(new java.awt.Dimension(500, 500));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        film_tablosu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Film Adı", "Tarih", "Saat", "Salon"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        film_tablosu.getTableHeader().setReorderingAllowed(false);
        film_tablosu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                film_tablosuMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(film_tablosu);
        if (film_tablosu.getColumnModel().getColumnCount() > 0) {
            film_tablosu.getColumnModel().getColumn(0).setMinWidth(30);
            film_tablosu.getColumnModel().getColumn(0).setPreferredWidth(20);
            film_tablosu.getColumnModel().getColumn(0).setMaxWidth(30);
        }

        jLabel1.setText("Film Adı:");

        jLabel2.setText("Tarih:");

        jLabel3.setText("Saat:");

        jLabel4.setText("Salon:");

        film_salon.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                film_salonİtemStateChanged(evt);
            }
        });

        film_ekle.setText("Film Ekle");
        film_ekle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                film_ekleActionPerformed(evt);
            }
        });

        film_guncelle.setText("Film Güncelle");
        film_guncelle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                film_guncelleActionPerformed(evt);
            }
        });

        film_sil.setText("Film Sil");
        film_sil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                film_silActionPerformed(evt);
            }
        });

        hata_mesaj.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        hata_mesaj.setForeground(new java.awt.Color(255, 0, 0));

        film_gunceller.setText("Liste Güncelle");
        film_gunceller.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                film_guncellerActionPerformed(evt);
            }
        });

        koltuklar.setText("123");
        koltuklar.setForeground(new java.awt.Color(204, 0, 0));

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("FİLM YÖNETİMİ");
        jLabel6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        Salon_Yonetim.setText("Salon Yönetimi");
        Salon_Yonetim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Salon_YonetimActionPerformed(evt);
            }
        });

        hata_mesaj1.setText("123");
        hata_mesaj1.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        hata_mesaj1.setForeground(new java.awt.Color(255, 0, 0));

        exit.setText("Seçenekler");

        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/sinema/images/exit.png"))); // NOI18N
        jMenuItem1.setText("Çıkış");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        exit.add(jMenuItem1);

        jMenuBar1.add(exit);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(hata_mesaj, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(140, 140, 140))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(film_tarih, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(film_saat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(film_salon, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(9, 9, 9)
                                        .addComponent(film_adi, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(koltuklar, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(38, 38, 38)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(film_guncelle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(film_ekle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(film_sil, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(Salon_Yonetim, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(hata_mesaj1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(film_gunceller))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(12, 12, 12))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(hata_mesaj2, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator3)
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(film_adi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(film_salon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(film_tarih, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(film_saat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                        .addComponent(koltuklar))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(film_ekle)
                        .addGap(10, 10, 10)
                        .addComponent(film_guncelle)
                        .addGap(10, 10, 10)
                        .addComponent(film_sil)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Salon_Yonetim)))
                .addGap(12, 12, 12)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hata_mesaj2)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(hata_mesaj1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hata_mesaj))
                    .addComponent(film_gunceller))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // tablodan secilen film bilgilerini id'ye göre belirli veritabanındadki yerinde günceller.
    
    private void film_guncelleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_film_guncelleActionPerformed
        String ad = film_adi.getText();
        String tarih = film_tarih.getDateStringOrEmptyString();
        String saat = film_saat.getTimeStringOrEmptyString();
        String salon = (String) film_salon.getSelectedItem();

        int selectedrow = film_tablosu.getSelectedRow();

        if (selectedrow == -1) {

            if (model.getRowCount() == 0) {
                hata_mesaj1.setText("Film Tablosu şu anda boş. ");
            } else {
                hata_mesaj1.setText("Lütfen güncellenecek bir film seçin.");
            }
        } else {

            int id = (int) model.getValueAt(selectedrow, 0);
            String ad_k = (String) model.getValueAt(selectedrow, 1);
            String salon_k = (String) model.getValueAt(selectedrow, 4);
            String tarih_k = (String) model.getValueAt(selectedrow, 2);
            String saat_k = (String) model.getValueAt(selectedrow, 3);

            if (ad.equals("")) {
                hata_mesaj1.setText("Film adı kısmı boş bırakılamaz.");
            } else if (salon.equals("")) {
                hata_mesaj1.setText("Salon seçimi boş bırakılamaz.");
            } else if (tarih.equals("")) {
                hata_mesaj1.setText("Film tarihi kısmı boş bırakılamaz.");
            } else if (saat.equals("")) {
                hata_mesaj1.setText("Film saati kısmı boş bırakılamaz.");
            } else if (dogrulamaYap(tarih)) {
                JOptionPane.showMessageDialog(null, "Geçmiş tarihler için film güncelleyemezsin.", "Hata Mesajı", 1);
            } else if (saatdogrulamaYap(saat, tarih)) {
                JOptionPane.showMessageDialog(null, "Geçmiş saatler için film güncelleyemezsin.", "Hata Mesajı", 1);
            } else {
                islemler.koltukSil(ad_k, salon_k, tarih_k, saat_k);
                islemler.filmGuncelle(id, ad, tarih, saat, salon);
                biletOlustur(ad, tarih, saat, salon);
                filmGoruntule();
                hata_mesaj1.setText("Film başarıyla güncellendi...");
            }
        }

    }//GEN-LAST:event_film_guncelleActionPerformed

    // seçim yapılan satırdaki id bilgisine göre veritabanından film siler.
    
    private void film_silActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_film_silActionPerformed
        hata_mesaj1.setText("");

        int selectedrow = film_tablosu.getSelectedRow();
        if (selectedrow == -1) {
            if (model.getRowCount() == 0) {
                hata_mesaj1.setText("Film tablosu şu anda boş...");
            } else {
                hata_mesaj1.setText("Lütfen silinecek bir film seçin...");
            }

        } else {
            int id = (int) model.getValueAt(selectedrow, 0);
            String ad = (String) model.getValueAt(selectedrow, 1);
            String salon = (String) model.getValueAt(selectedrow, 4);
            String tarih = (String) model.getValueAt(selectedrow, 2);
            String saat = (String) model.getValueAt(selectedrow, 3);
            islemler.koltukSil(ad, salon, tarih, saat);
            islemler.filmSil(id);
            islemler.biletSil(ad, tarih, saat);

            filmGoruntule();

            hata_mesaj1.setText("Film başarıyla silindi...");
        }
    }//GEN-LAST:event_film_silActionPerformed

    // girilen bilgilere göre yeni film oluşturur. saat tarih kontrolü yapar .
    // film oluşturulur ise veritabanında boş biletleri oluşturur.
    
    private void film_ekleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_film_ekleActionPerformed
        hata_mesaj1.setText("");

        String ad = film_adi.getText();
        String salon = (String) film_salon.getSelectedItem();
        String tarih = film_tarih.getDateStringOrEmptyString();
        String saat = film_saat.getTimeStringOrEmptyString();

        if (ad.equals("")) {
            hata_mesaj1.setText("Film adı kısmı boş bırakılamaz.");
        } else if (salon.equals("")) {
            hata_mesaj1.setText("Salon seçimi boş bırakılamaz.");
        } else if (tarih.equals("")) {
            hata_mesaj1.setText("Film tarihi kısmı boş bırakılamaz.");
        } else if (saat.equals("")) {
            hata_mesaj1.setText("Film saati kısmı boş bırakılamaz.");
        } else if (dogrulamaYap(tarih)) {
            JOptionPane.showMessageDialog(null, "Geçmiş tarihler için film ekleyemezsin.", "Hata Mesajı", 1);
        } else if (saatdogrulamaYap(saat, tarih)) {
            JOptionPane.showMessageDialog(null, "Geçmiş saatler için film ekleyemezsin.", "Hata Mesajı", 1);
        } else {
            islemler.filmEkle(ad, tarih, saat, salon);
            filmGoruntule();
            biletOlustur(ad, tarih, saat, salon);
            film_adi.setText("");
            film_tarih.setText("");
            film_saat.setText("");
            film_salon.setSelectedItem("Salon 1");

            hata_mesaj1.setText("Yeni Film Başarıyla Eklendi...");
        }
    }//GEN-LAST:event_film_ekleActionPerformed

    private void film_guncellerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_film_guncellerActionPerformed
        filmGoruntule();
        hata_mesaj1.setText("Liste Güncellendi ...");
    }//GEN-LAST:event_film_guncellerActionPerformed

    // tabloda seçilen verileri textfield içerisine yazar.
    
    private void film_tablosuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_film_tablosuMouseClicked
        int selectedrow = film_tablosu.getSelectedRow();

        film_adi.setText(model.getValueAt(selectedrow, 1).toString());
        film_tarih.setText(filmTarihAl(model.getValueAt(selectedrow, 2).toString()));
        film_saat.setText(model.getValueAt(selectedrow, 3).toString());
        film_salon.setSelectedItem(model.getValueAt(selectedrow, 4).toString());
    }//GEN-LAST:event_film_tablosuMouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.setVisible(false);
        YetkiliPanel ansyf = new YetkiliPanel();
        ansyf.setVisible(true);
    }//GEN-LAST:event_formWindowClosing

    private void Salon_YonetimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Salon_YonetimActionPerformed
        this.setVisible(false);
        SalonYonetim slnyt = new SalonYonetim();
        slnyt.setVisible(true);
    }//GEN-LAST:event_Salon_YonetimActionPerformed

    private void film_salonİtemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_film_salonİtemStateChanged
        String sorgu = (String) film_salon.getSelectedItem();
        String no = islemler.salonveriAra(sorgu);
        koltuklar.setText(no);

    }//GEN-LAST:event_film_salonİtemStateChanged

    
    // film nesnesinde saklanan verileri array yardımıyla tablo içerisine yazar.
    
    public void filmGoruntule() {

        model.setRowCount(0);

        ArrayList<Film> filmler = new ArrayList<Film>();

        filmler = islemler.filmGetir();

        if (filmler != null) {

            for (Film film : filmler) {
                Object[] eklenecek = {film.getId(), film.getFilm_adi(), film.getFilm_tarih(), film.getFilm_saat(), film.getFilm_salon()};

                model.addRow(eklenecek);

            }

        }

    }

    // tarih aynı ise saat kontrolü yapar. 
    
    public boolean saatdogrulamaYap(String saat, String tarih) {
        String today = LocalTime.now().toString();
        int todaysaat = Integer.parseInt(today.substring(0, 2));
        int todaydakika = Integer.parseInt(today.substring(3, 5));

        int saatn = Integer.parseInt(saat.substring(0, 2));
        int dakikan = Integer.parseInt(saat.substring(3, 5));

        String todayt = LocalDate.now().toString();
        int todayyil = Integer.parseInt(todayt.substring(0, 4));
        int todayay = Integer.parseInt(todayt.substring(5, 7));
        int todaygun = Integer.parseInt(todayt.substring(8));

        int yil = Integer.parseInt(tarih.substring(0, 4));
        int ay = Integer.parseInt(tarih.substring(5, 7));
        int gun = Integer.parseInt(tarih.substring(8));

        if (todayay == ay && todaygun == gun && todayyil == yil) {
            if (saatn == todaysaat && dakikan > todaydakika) {
                return false;
            } else if (saatn > todaysaat) {
                return false;
            } else {
                return true;
            }
        } else {
            return false;
        }
    }

    // tarih kontorlü yapar.
    
    public boolean dogrulamaYap(String tarih) {
        String today = LocalDate.now().toString();
        int todayyil = Integer.parseInt(today.substring(0, 4));
        int todayay = Integer.parseInt(today.substring(5, 7));
        int todaygun = Integer.parseInt(today.substring(8));

        int yil = Integer.parseInt(tarih.substring(0, 4));
        int ay = Integer.parseInt(tarih.substring(5, 7));
        int gun = Integer.parseInt(tarih.substring(8));
        
        if (yil == todayyil && ay == todayay && gun >= todaygun) {
            return false;
        }  
        if (yil == todayyil && ay > todayay) {
            return false;
        } 
        if (yil > todayyil) {
            return false;
        } else {
            return true;
        }
    }
    
    
    public String filmTarihAl(String tarih) {
        String gun = tarih.substring(8, 10);
        String ays = tarih.substring(5, 7);
        String yıl = tarih.substring(0, 4);;
        String ay;
        switch (ays) {
            case "01":
                ay = "Ocak";
                break;
            case "02":
                ay = "Şubat";
                break;
            case "03":
                ay = "Mart";
                break;
            case "04":
                ay = "Nisan";
                break;
            case "05":
                ay = "Mayıs";
                break;
            case "06":
                ay = "Haziran";
                break;
            case "07":
                ay = "Temmuz";
                break;
            case "08":
                ay = "Ağustos";
                break;
            case "09":
                ay = "Eylül";
                break;
            case "10":
                ay = "Ekim";
                break;
            case "11":
                ay = "Kasım";
                break;
            case "12":
                ay = "Aralık";
                break;
            default:
                ay = "Ocak";
        }
        return gun + " " + ay + " " + yıl;
    }

    // veritabanında saklanan salon bilgisini sinemasalon nesnesi üzerinde tanımlı array ile 
    // ComBox içerisine kaydeder.
    
    public void salonveriAl() {
        ArrayList<SinemaSalon> salonlar = new ArrayList<SinemaSalon>();

        salonlar = islemler.salonGetir();

        if (salonlar != null) {
            film_salon.removeAllItems();
            for (SinemaSalon salon : salonlar) {
                film_salon.addItem(salon.getSalon_Adi());
            }

        }
    }

    
    // filme göre boş biletleri veritabanına ekler 

    public void biletOlustur(String ad, String tarih, String saat, String salon) {
        islemler.koltukEkle(ad, "A1", salon, tarih, saat, "false");
        islemler.koltukEkle(ad, "A2", salon, tarih, saat, "false");
        islemler.koltukEkle(ad, "A3", salon, tarih, saat, "false");
        islemler.koltukEkle(ad, "A4", salon, tarih, saat, "false");
        islemler.koltukEkle(ad, "A5", salon, tarih, saat, "false");
        islemler.koltukEkle(ad, "B1", salon, tarih, saat, "false");
        islemler.koltukEkle(ad, "B2", salon, tarih, saat, "false");
        islemler.koltukEkle(ad, "B3", salon, tarih, saat, "false");
        islemler.koltukEkle(ad, "B4", salon, tarih, saat, "false");
        islemler.koltukEkle(ad, "B5", salon, tarih, saat, "false");
        islemler.koltukEkle(ad, "C1", salon, tarih, saat, "false");
        islemler.koltukEkle(ad, "C2", salon, tarih, saat, "false");
        islemler.koltukEkle(ad, "C3", salon, tarih, saat, "false");
        islemler.koltukEkle(ad, "C4", salon, tarih, saat, "false");
        islemler.koltukEkle(ad, "C5", salon, tarih, saat, "false");
        islemler.koltukEkle(ad, "D1", salon, tarih, saat, "false");
        islemler.koltukEkle(ad, "D2", salon, tarih, saat, "false");
        islemler.koltukEkle(ad, "D3", salon, tarih, saat, "false");
        islemler.koltukEkle(ad, "D4", salon, tarih, saat, "false");
        islemler.koltukEkle(ad, "D5", salon, tarih, saat, "false");
        islemler.koltukEkle(ad, "E1", salon, tarih, saat, "false");
        islemler.koltukEkle(ad, "E2", salon, tarih, saat, "false");
        islemler.koltukEkle(ad, "E3", salon, tarih, saat, "false");
        islemler.koltukEkle(ad, "E4", salon, tarih, saat, "false");
        islemler.koltukEkle(ad, "E5", salon, tarih, saat, "false");

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FilmYonetim.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FilmYonetim.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FilmYonetim.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FilmYonetim.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FilmYonetim().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Salon_Yonetim;
    private javax.swing.JMenu exit;
    private javax.swing.JTextField film_adi;
    private javax.swing.JButton film_ekle;
    private javax.swing.JButton film_guncelle;
    private javax.swing.JButton film_gunceller;
    private com.github.lgooddatepicker.components.TimePicker film_saat;
    private javax.swing.JComboBox<String> film_salon;
    private javax.swing.JButton film_sil;
    private javax.swing.JTable film_tablosu;
    private com.github.lgooddatepicker.components.DatePicker film_tarih;
    private javax.swing.JLabel hata_mesaj;
    private javax.swing.JLabel hata_mesaj1;
    private javax.swing.JLabel hata_mesaj2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel koltuklar;
    // End of variables declaration//GEN-END:variables
}
